// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hyle.TextDocument = (function(superClass) {
  extend(TextDocument, superClass);

  function TextDocument(data) {
    this.data = data;
    this.layer = null;
    this.setValue();
  }

  TextDocument.prototype.setTextDocument = function() {
    var sourceText, textDocument;
    sourceText = this.layer.property("Source Text");
    textDocument = {};
    textDocument = this.setTextDocumentProperty(sourceText);
    return this.setValues(sourceText, textDocument);

    /*
    Know bug here: The textDocument doesn't apply when there are keyframes
    The code below should be a good starting point but doesn't work.
    
    if @data.sourceText.keyframes
      textDocument.keyframes = []
      for keyframe in @data.sourceText.keyframes
        textDocument.keyframes.push
          time: keyframe.time
          value: @setTextDocumentProperty sourceText
     */
  };

  TextDocument.prototype.setTextDocumentProperty = function(sourceText) {
    var i, len, propertyName, ref, textDocument;
    textDocument = sourceText.value;
    textDocument.resetCharStyle();
    ref = ["fontSize", "fillColor", "strokeWidth", "font", "strokeOverFill", "applyStroke", "applyFill", "justification", "tracking"];
    for (i = 0, len = ref.length; i < len; i++) {
      propertyName = ref[i];
      textDocument[propertyName] = this.data[propertyName];
    }
    return textDocument;
  };

  TextDocument.prototype.setValues = function(sourceText, textDocument) {
    return TextDocument.__super__.setValues.call(this, sourceText, textDocument);
  };

  TextDocument.prototype.setLayer = function(layer) {
    return this.layer = layer;
  };

  TextDocument.prototype.getValue = function() {
    return this.value;
  };

  TextDocument.prototype.setValue = function() {
    if (typeof this.data === "string") {
      return this.value = this.data;
    } else if (this.data.value) {
      return this.value = this.data.value;
    } else {
      return this.value = "";
    }
  };

  TextDocument.prototype.getTextDocumentSourceText = function() {};

  return TextDocument;

})(Hyle.Property);
