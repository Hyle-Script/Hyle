// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Hyle.LayerInstance = (function(_super) {
  __extends(LayerInstance, _super);

  function LayerInstance() {
    this.defaults = {};
    this.setDefaults({
      name: null,
      duration: 10
    });
  }

  LayerInstance.prototype.initiate = function(data) {
    this.sourceData = clone(data);
    this.layersCollection = hyle.parser.layersCollection;
    return this.data = this.extend(data, this.defaults);
  };

  LayerInstance.prototype.setDefaults = function(defaults) {
    var key, _results;
    _results = [];
    for (key in defaults) {
      _results.push(this.defaults[key] = defaults[key]);
    }
    return _results;
  };

  LayerInstance.prototype.setPostRenderProperties = function() {
    if (this.data.transform) {
      this.setTransform();
    }
    if (this.data.effects) {
      this.setEffects();
    }
    if (this.data.styles) {
      this.setStyles();
    }
    if (this.data.masks) {
      this.setMasks();
    }
    if (this.data.options) {
      this.setOptions();
    }
    if (this.data.parent) {
      return this.setParent();
    }
  };

  LayerInstance.prototype.setParent = function() {
    return this.layer.parent = hyle.parser.layersCollection.find(this.data.parent).layer;
  };

  LayerInstance.prototype.setTransform = function(target, data) {
    if (target == null) {
      target = null;
    }
    if (data == null) {
      data = null;
    }
    if (!target) {
      target = this.layer;
    }
    if (!data) {
      data = this.data.transform;
    }
    return this.apply(target["transform"], data, true);
  };

  LayerInstance.prototype.setOptions = function(target, data) {
    if (target == null) {
      target = null;
    }
    if (data == null) {
      data = null;
    }
    if (!target) {
      target = this.layer;
    }
    if (!data) {
      data = this.data.options;
    }
    return this.apply(target, data, true);
  };

  LayerInstance.prototype.setStyles = function() {
    var layerStyle, styleData, type, _i, _len, _ref, _results;
    _ref = this.data.styles;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      styleData = _ref[_i];
      try {
        type = styleData.type.toTitleCase();
        app.executeCommand(app.findMenuCommandId(type));
        layerStyle = this.layer.property("Layer Styles").property(type);
        _results.push(this.setStyleProperties(layerStyle, styleData));
      } catch (_error) {
        _results.push(logError("Hyle is unable find layer style named \"" + (styleData.type.toTitleCase()) + "\""));
      }
    }
    return _results;
  };

  LayerInstance.prototype.setStyleProperties = function(layerStyle, styleData) {
    return this.apply(layerStyle, styleData, true);
  };

  LayerInstance.prototype.setEffects = function() {
    var effectPropertiesApplier;
    effectPropertiesApplier = new Hyle.EffectFactory(this.data.effects, this.layer);
    return effectPropertiesApplier.applyToLayer();
  };

  LayerInstance.prototype.setMasks = function() {
    var mask, maskData, _i, _len, _ref, _results;
    _ref = this.data.masks;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      maskData = _ref[_i];
      _results.push(mask = new Hyle.Mask(maskData, this.layer));
    }
    return _results;
  };

  LayerInstance.prototype.render = function(layer) {
    this.layer = layer;
    this.data = this.adaptObject(this.data, {
      scope: "layer"
    });
    this.apply(this.layer, this.data);
    return this.setPostRenderProperties();
  };

  return LayerInstance;

})(Hyle.Layer);
