// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hyle.ShapeLayerInstance = (function(superClass) {
  extend(ShapeLayerInstance, superClass);

  function ShapeLayerInstance(data) {
    if (data.contents == null) {
      data.contents = {};
    }
    ShapeLayerInstance.__super__.constructor.apply(this, arguments);
    this.setDefaults({
      name: "Shape Layer"
    });
    this.initiate(data);
    this;
  }

  ShapeLayerInstance.prototype.render = function() {
    ShapeLayerInstance.__super__.render.call(this, this.data.AVCompItemTarget.layers.addShape());
    return this.setShapesProperties(this.data.contents);
  };

  ShapeLayerInstance.prototype.setShapesTransformProperties = function() {
    return this.apply(this.layer[""], this.data.transform, true);
  };

  ShapeLayerInstance.prototype.setShapesProperties = function(contents, vectorGroup) {
    var data, i, len, results, shape;
    if (vectorGroup == null) {
      vectorGroup = null;
    }
    results = [];
    for (i = 0, len = contents.length; i < len; i++) {
      data = contents[i];
      switch (data.type) {
        case "group":
          vectorGroup = this.createShapeGroup(data);
          if (data.transform) {
            this.setTransform(vectorGroup, data.transform);
          }
          this.setShapesProperties(data.contents, vectorGroup);
          break;
        default:
          data.type = new Hyle.PropertyInstance("type", data.type).adapt({
            scope: "layer.shape.contents"
          }).getPropertyValue();
          vectorGroup = vectorGroup != null ? vectorGroup : vectorGroup = this.layer;
          shape = vectorGroup.property("Contents").addProperty(data.type);
          if (data.transform) {
            this.setTransform(shape, data.transform);
          }
          this.apply(shape, data, true);
      }
      results.push(vectorGroup = null);
    }
    return results;
  };

  ShapeLayerInstance.prototype.createShapeGroup = function(groupData) {
    var vectorGroup;
    vectorGroup = this.layer.property("Contents").addProperty("ADBE Vector Group");
    if (groupData != null ? groupData.name : void 0) {
      vectorGroup.name = groupData.name;
    }
    return vectorGroup;
  };

  return ShapeLayerInstance;

})(Hyle.LayerInstance);
