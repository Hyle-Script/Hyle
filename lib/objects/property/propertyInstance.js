// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hyle.PropertyInstance = (function(superClass) {
  extend(PropertyInstance, superClass);

  function PropertyInstance(propertyName1, propertyValue1) {
    this.propertyName = propertyName1;
    this.propertyValue = propertyValue1;
    PropertyInstance.__super__.constructor.apply(this, arguments);
    this;
  }

  PropertyInstance.prototype.hasKeyframes = function() {
    var ref;
    return (ref = this.propertyValue.keyframes) != null ? ref : {
      "true": false
    };
  };

  PropertyInstance.prototype.apply = function(object, skip) {
    if (skip == null) {
      skip = false;
    }
    if (skip) {
      this.setValues(object);
    }
    if (typeof object.property === "function") {
      if (object.property(this.propertyName)) {
        if (typeof object.property(this.propertyName).setValue === "function") {
          this.setValues(object);
        }
      } else {
        try {
          object[this.propertyName] = this.propertyValue;
        } catch (undefined) {}
      }
    } else {
      object[this.propertyName] = this.propertyValue;
    }
    return this;
  };

  PropertyInstance.prototype.setValues = function(object) {
    return PropertyInstance.__super__.setValues.call(this, object.property(this.propertyName), this.propertyValue);
  };

  PropertyInstance.prototype.processValue = function(propertyValue) {
    return propertyValue;
  };

  PropertyInstance.prototype.adapt = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.propertyName = this.adaptPropertyName(this.propertyName, opts);
    this.propertyValue = this.adaptPropertyValue(this.propertyName, this.propertyValue, opts);
    return this;
  };

  PropertyInstance.prototype.adaptPropertyName = function(propertyName, opts) {
    var propertyNamesTranslations, ref, translatedPropertyName;
    propertyNamesTranslations = this.getPropertyNameTranslations(opts, "t");
    translatedPropertyName = ((ref = propertyNamesTranslations[propertyName]) != null ? ref["o"] : void 0) || propertyName;
    if (translatedPropertyName instanceof Array) {
      translatedPropertyName = translatedPropertyName[0];
    }
    return translatedPropertyName;
  };

  PropertyInstance.prototype.adaptPropertyValue = function(propertyName, propertyValue, opts) {
    if (propertyValue) {
      propertyValue = this.evalIfDirective(propertyValue);
      propertyValue = this.makeValueReplacements(propertyName, propertyValue, opts);
    }
    return propertyValue;
  };

  PropertyInstance.prototype.makeValueReplacements = function(propertyName, propertyValue, opts) {
    var r;
    r = propertyValue;
    switch (propertyName.toLowerCase()) {
      case "lighttype":
        r = LightType[propertyValue.toString().toUpperCase()];
        break;
      case "blendingmode":
        if (typeof propertyValue === "string") {
          r = BlendingMode[propertyValue.replace(/( )/g, "_").toString().toUpperCase()];
        }
        break;
      case "trackmattetype":
        if (typeof propertyValue === "string") {
          r = TrackMatteType[propertyValue.replace(/( )/g, "_").toString().toUpperCase()];
        }
        break;
      case "maskmode":
        if (typeof propertyValue === "string") {
          r = MaskMode[propertyValue.replace(/( )/g, "_").toString().toUpperCase()];
        }
        break;
      case "color":
      case "color 1":
      case "fillcolor":
      case "color 2":
      case "color 3":
      case "color 4":
      case "color 5":
      case "map black to":
      case "map white to":
      case "tint color":
      case "shadows unbalance":
      case "midtones unbalance":
      case "highlights unbalance":
      case "highlights":
      case "brights":
      case "midtones":
      case "darktones":
      case "shadows":
      case "color to change":
        if (typeof propertyValue === "string") {
          r = esy.color.hexToHsl(propertyValue);
        }
        break;
      case "inPoint":
      case "outPoint":
      case "duration":
      case "time":
        r = this.convertToFrameIfNeeded(propertyValue);
        break;
      case "justification":
        switch (propertyValue) {
          case "left":
          case "center":
          case "right":
            r = ParagraphJustification[(propertyValue.toUpperCase()) + "_JUSTIFY"];
            break;
          case "justifiedLeft":
          case "justifiedCenter":
          case "justifiedRight":
            r = ParagraphJustification["FULL_JUSTIFY_LASTLINE_" + (propertyValue.replace('justified', '').toUpperCase())];
        }
    }
    switch (opts.scope) {
      case "layer.shape.contents":
        switch (propertyName) {
          case "type":
            switch (propertyValue) {
              case "rectangle":
                r = "ADBE Vector Shape - Rect";
                break;
              case "ellipse":
              case "circle":
                r = "ADBE Vector Shape - Ellipse";
                break;
              case "polystar":
                r = "ADBE Vector Shape - Star";
                break;
              case "fill":
                r = "ADBE Vector Graphic - Fill";
                break;
              case "stroke":
                r = "ADBE Vector Graphic - Stroke";
                break;
              case "gradient fill":
                r = "ADBE Vector Graphic - G-Fill";
                break;
              case "gradient stroke":
                r = "ADBE Vector Graphic - G-Stroke";
                break;
              case "merge paths":
                r = "ADBE Vector Filter - Merge";
                break;
              case "offset paths":
                r = "ADBE Vector Filter - Offset";
                break;
              case "pucker and bloat":
              case "pucker & bloat":
                r = "ADBE Vector Filter - PB";
                break;
              case "round corners":
                r = "ADBE Vector Filter - RC";
                break;
              case "trim paths":
                r = "ADBE Vector Filter - Trim";
                break;
              case "twist":
                r = "ADBE Vector Filter - Twist";
                break;
              case "wiggle paths":
                r = "ADBE Vector Filter - Roughen";
                break;
              case "wiggle transform":
                r = "ADBE Vector Filter - Wiggler";
                break;
              case "zig zag":
                r = "ADBE Vector Filter - Zigzag";
                break;
              case "repeater":
                r = "ADBE Vector Filter - Repeater";
            }
        }
    }
    return r;
  };

  return PropertyInstance;

})(Hyle.Property);
