// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hyle.FolderItemsFactory = (function(superClass) {
  extend(FolderItemsFactory, superClass);

  function FolderItemsFactory(foldersData) {
    this.folders = [];
    this.foldersData = foldersData;
    this.folderItemsCollection = hyle.parser.folderItemsCollection;
    this.nestingLevel = 0;
    this.lastStoredFolder = null;
    this.currentParentFolder = app.project.rootFolder;
    this.parentFoldersArray = [];
    this.createFolders();
    return this.folders;
  }

  FolderItemsFactory.prototype.createFolders = function() {
    var folderData, j, len, matches, ref, results;
    ref = this.foldersData;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      folderData = ref[j];
      if (typeof folderData === "string") {
        folderData = {
          name: folderData
        };
      }
      if (folderData.name.match(/^(\| )/gi)) {
        matches = folderData.name.match(/(\| )/gi);
        if (matches.length > this.nestingLevel) {
          this.incrementNesting(matches);
        } else if (matches.length < this.nestingLevel) {
          this.decrementNesting(matches);
        }
        folderData.name = folderData.name.replace(/^\| +/gi, "");
      } else {
        if (folderData.parentFolder == null) {
          folderData.parentFolder = folderData.folder || folderData["parent folder"] || null;
        }
        if (folderData.parentFolder) {
          this.currentParentFolder = this.folderItemsCollection.find(folderData.parentFolder).item;
        } else {
          folderData.parentFolder = this.currentParentFolder = app.project.rootFolder;
        }
        this.nestingLevel = 0;
      }
      results.push(this.lastStoredFolder = this.createFolder(folderData, this.currentParentFolder));
    }
    return results;
  };

  FolderItemsFactory.prototype.createFolder = function(data, parent) {
    var folder;
    folder = new Hyle.FolderItemInstance(data);
    folder.store();
    folder.setParentFolder(parent);
    this.folderItemsCollection.add(folder);
    return folder.item;
  };

  FolderItemsFactory.prototype.incrementNesting = function(matches) {
    this.nestingLevel++;
    this.currentParentFolder = this.lastStoredFolder;
    return this.parentFoldersArray.push(this.lastStoredFolder);
  };

  FolderItemsFactory.prototype.decrementNesting = function(matches) {
    var difference, i, j, ref;
    difference = this.nestingLevel - matches.length;
    this.nestingLevel = this.nestingLevel - difference;
    for (i = j = 1, ref = difference; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      this.parentFoldersArray.pop();
    }
    return this.currentParentFolder = this.parentFoldersArray[this.parentFoldersArray.length - 1];
  };

  return FolderItemsFactory;

})(Hyle.Factory);
