// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Hyle.CompositionItemsFactory = (function(superClass) {
  extend(CompositionItemsFactory, superClass);

  function CompositionItemsFactory(compositionsData) {
    this.composition;
    this.compositionItemsCollection = hyle.parser.compositionItemsCollection;
    this.folderItemsCollection = hyle.parser.folderItemsCollection;
    this.createCompositions(compositionsData);
  }

  CompositionItemsFactory.prototype.createCompositions = function(compositionsData) {
    var compositionData, i, len, results;
    results = [];
    for (i = 0, len = compositionsData.length; i < len; i++) {
      compositionData = compositionsData[i];
      this.composition = new Hyle.CompositionItemInstance(compositionData);
      this.composition.store();
      if (compositionData.composition) {
        this.setParentComposition(compositionData.composition);
      }
      if (compositionData.folder) {
        this.setParentFolder(compositionData.folder);
      }
      if (compositionData.fetch) {
        this.fetchComposition(compositionData.fetch);
      }
      if (compositionData.layers) {
        this.createLayers(compositionData.layers);
      }
      results.push(this.compositionItemsCollection.add(this.composition));
    }
    return results;
  };

  CompositionItemsFactory.prototype.setParentComposition = function(compositionPointer) {
    var parentComposition;
    parentComposition = this.compositionItemsCollection.find(compositionPointer).item;
    return this.composition.setParentComposition(parentComposition);
  };

  CompositionItemsFactory.prototype.fetchComposition = function(compositionPointer) {
    var fetchedComposition;
    fetchedComposition = this.compositionItemsCollection.find(compositionPointer).item;
    return this.composition.item.layers.add(fetchedComposition);
  };

  CompositionItemsFactory.prototype.setParentFolder = function(folderPointer) {
    var parentFolder;
    parentFolder = this.folderItemsCollection.find(folderPointer).item;
    return this.composition.setParentFolder(parentFolder);
  };

  CompositionItemsFactory.prototype.createLayers = function(layersData) {
    var layersFactory;
    return layersFactory = new Hyle.LayersFactory(layersData, this.composition);
  };

  return CompositionItemsFactory;

})(Hyle.Factory);
