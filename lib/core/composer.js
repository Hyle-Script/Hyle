// Generated by CoffeeScript 1.7.1
Hyle.Composer = (function() {
  function Composer() {
    this.composedContent = {
      folders: [],
      compositions: [],
      files: []
    };
  }

  Composer.prototype.compose = function() {
    var composedContent;
    this.listItems(app.project.numItems);
    composedContent = this.stringify(this.composedContent);
    composedContent = this.cleanUp(composedContent);
    return composedContent;
  };

  Composer.prototype.cleanUp = function(content) {
    content = content.replace(/\-(\r\n|\n|\r)/gm, "-");
    content = content.replace(/\- {2,}/gm, "- ");
    content = content.replace(/\: \'(.+)'/gm, ": $1");
    return content;
  };

  Composer.prototype.append = function(category, content) {
    if (!isObjectEmpty(content)) {
      return this.composedContent[category].push(content);
    }
  };

  Composer.prototype.stringify = function(composedContent) {
    var content;
    content = hyle.yaml.stringify(composedContent, 50, 2);
    return content;
  };

  Composer.prototype.listItems = function(dataSet) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 1; 1 <= dataSet ? _i <= dataSet : _i >= dataSet; i = 1 <= dataSet ? ++_i : --_i) {
      if (app.project.item(i) instanceof FolderItem) {
        this.listFolder(app.project.item(i));
      }
      if (app.project.item(i) instanceof CompItem) {
        this.listComposition(app.project.item(i));
      }
      if (app.project.item(i) instanceof FootageItem) {
        _results.push(this.listFile(app.project.item(i)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Composer.prototype.listFolder = function(folderItem) {
    var folderItemInterpretor;
    folderItemInterpretor = new Hyle.FolderItemInterpretor(folderItem);
    return this.append("folders", folderItemInterpretor.compact());
  };

  Composer.prototype.listComposition = function(compositionItem) {
    var compositionItemInterpretor;
    compositionItemInterpretor = new Hyle.CompositionItemInterpretor(compositionItem);
    return this.append("compositions", compositionItemInterpretor.compact());
  };

  Composer.prototype.listFile = function(fileItem) {
    var fileItemInterpretor;
    fileItemInterpretor = new Hyle.FileItemInterpretor(fileItem);
    return this.append("files", fileItemInterpretor.compact());
  };

  return Composer;

})();
