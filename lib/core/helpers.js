// Generated by CoffeeScript 1.7.1
var clone, dotAccess, invert, isFoundIn, isObjectAndNotArray, isObjectEmpty, logError, toDict;

isObjectEmpty = function(obj) {
  var r;
  r = false;
  if (obj) {
    if (obj.length > 0) {
      r = true;
    }
  }
  return r;
};

isObjectAndNotArray = function(obj) {
  return typeof obj === "object" && !(obj instanceof Array);
};

isFoundIn = function(term, array) {
  return array.indexOf(term) !== -1;
};

toDict = function(array, key) {
  var dict, i, obj;
  dict = {};
  i = 0;
  while (i < array.length) {
    obj = array[i];
    if (obj[key] !== null) {
      dict[obj[key]] = obj;
    }
    i++;
  }
  return dict;
};

logError = function(error) {
  return esy.file.create("/" + $.appData + "/Hyle/errors.txt", "" + (Date()) + "\n" + (error.toString()), false);
};

String.prototype.capitalize = function() {
  return this.replace(/(?:^|\s)\S/g, function(a) {
    return a.toUpperCase();
  });
};

String.prototype.toTitleCase = function() {
  var i, lowers, str, uppers;
  i = void 0;
  str = void 0;
  lowers = void 0;
  uppers = void 0;
  str = this.replace(/([^\W_]+[^\s-]*) */g, function(txt) {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
  lowers = ["A", "An", "The", "And", "But", "Or", "For", "Nor", "As", "At", "By", "For", "From", "In", "Into", "Near", "Of", "On", "Onto", "To", "With"];
  i = 0;
  while (i < lowers.length) {
    str = str.replace(new RegExp("\\s" + lowers[i] + "\\s", "g"), function(txt) {
      return txt.toLowerCase();
    });
    i++;
  }
  uppers = ["Id", "Tv"];
  i = 0;
  while (i < uppers.length) {
    str = str.replace(new RegExp("\\b" + uppers[i] + "\\b", "g"), uppers[i].toUpperCase());
    i++;
  }
  return str;
};

invert = function(obj) {
  var new_obj, prop;
  new_obj = {};
  for (prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      new_obj[obj[prop]] = prop;
    }
  }
  return new_obj;
};

clone = function(obj) {
  var key, r, temp;
  r = obj;
  if (typeof obj === "object") {
    temp = {};
    for (key in obj) {
      temp[key] = obj[key];
    }
  }
  r = temp;
  return r;
};

dotAccess = function(obj, str) {
  var i;
  str = str.split('.');
  i = 0;
  while (i < str.length) {
    try {
      obj = obj[str[i]];
    } catch (_error) {}
    i++;
  }
  return obj;
};
